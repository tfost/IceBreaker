package main;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.imageio.ImageIO;

import display.Camera;
import entities.Player;
import generators.WorldBuilder;
import interfaces.Entity;
import interfaces.GameState;
import io.KeyboardInput;

public class GS_LevelState extends GameState{

	private Level level;
	private int floor;
	private Player player;
	private BufferedImage img;
	private Set<Entity> nonPlayerEntities;
	private Camera c;
	private int turnNum;
	
	// The Default Constructor, creating a totally new level at
	// the first level of a dungeon. The Player, floor, etc are
	// all created with default values.
	public GS_LevelState(KeyboardInput input) {
		super(input);
		WorldBuilder builder = new WorldBuilder();
		builder.populate();
		this.level = new Level(builder.toCharArray()); 
		//DEBUG:
		//this.level = new Level();
		Point p = this.level.getStartingPointCoords();
		this.player = (Player) level.getEntity(p.x, p.y);
		c = new Camera((Player) this.player);
		this.turnNum = 1;
		
		this.nonPlayerEntities = level.getNonPlayerEntities();
		this.img = null;
		try {
			img = ImageIO.read(getClass().getResource("/tileset.png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		this.floor = 1;
		System.out.println("Level " + this.floor);
	}
	
	/* This constructor takes arguments generated by a previous level. 
	 * It allows consistency between levels, by having proper floor numbers
	 * and the same player to be used over and over again. 
	 */
	public GS_LevelState(KeyboardInput input, int previousFloor, Player player, BufferedImage img) {
		super(input);
		WorldBuilder builder = new WorldBuilder();
		builder.populate();
		this.level = new Level(builder.toCharArray(), player);
		
		Point p = this.level.getStartingPointCoords();
		this.player = player;
		this.player.resetForNewLevel(this.level, p.x, p.y);
		this.c = new Camera((Player) this.player);
		this.turnNum = 1;
		this.img = img;
		this.nonPlayerEntities = level.getNonPlayerEntities();
		this.floor = previousFloor + 1;				
		System.out.println("Level " + this.floor);
	}
	
	/*
	 * Basic level flow:
	 * 		Increment turn counter
	 *		Wait for player to determine their action
	 *		execute player action
	 *		go through loop of all characters, to determine what their action will be
	 *			should enemy attack, do one after another.
	 *			should enemy move, decide where to move, move entity in world, but then display entity moving over time.
	 */
	
	@Override
	public void update() {
		
		keyboard.poll();
		if (player.inTurn()) {
			player.handleInput(keyboard);
			player.update();
			//If the player just completed their turn.
			if (!player.inTurn()) {
				for (Entity e : this.nonPlayerEntities) {
					e.onTurnStart(this.turnNum);
				}
			}
		} else { //at least 1 entity in the non-player-entities is in their turn.
			for (Entity e : this.nonPlayerEntities) {
				e.update(); 
			}
			if (!entitiesInTurn()) { //time for the player to go!
				this.turnNum++;
				player.onTurnStart(this.turnNum);
			}
		}
		removeDeadEntities();
		//if (this.player.ge)
		
	}
	
	private boolean entitiesInTurn() {
		for (Entity e : this.nonPlayerEntities) {
			if (e.inTurn()) {
				return true;
			}
		}
		return false;
	}
	
	private void removeDeadEntities() {
		Iterator<Entity> it = this.nonPlayerEntities.iterator();
		while (it.hasNext()) {
			Entity e = it.next();
			if (e.getHP() == 0) {
				level.removeEntity(e.getX(), e.getY());
				it.remove();
				
			}
		}
	}
	
	@Override
	public void paint(Graphics g) {
		this.level.paint(g, img, c);	
		for (Entity e : this.nonPlayerEntities) {
			e.paint(g, img, c);
		}
		this.player.paint(g, img, c);
		
	}

	@Override
	public GameState nextState() {
		return new GS_LevelState(this.keyboard, this.floor, this.player, this.img);
	}

	@Override
	public boolean inState() {
		// TODO Auto-generated method stub
		return this.player.isInlevel();
	}

}
